{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "CW20 token receiver",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Overseer operations Update config",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "liquidation_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Make specified amount of tokens unspendable",
      "type": "object",
      "required": [
        "lock_collateral"
      ],
      "properties": {
        "lock_collateral": {
          "type": "object",
          "required": [
            "amount",
            "borrower"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            },
            "borrower": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Make specified amount of collateral tokens spendable",
      "type": "object",
      "required": [
        "unlock_collateral"
      ],
      "properties": {
        "unlock_collateral": {
          "type": "object",
          "required": [
            "amount",
            "borrower"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            },
            "borrower": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim bAsset rewards and distribute claimed rewards to market and overseer contracts",
      "type": "object",
      "required": [
        "distribute_rewards"
      ],
      "properties": {
        "distribute_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Liquidate collateral and send liquidated collateral to `to` address",
      "type": "object",
      "required": [
        "liquidate_collateral"
      ],
      "properties": {
        "liquidate_collateral": {
          "type": "object",
          "required": [
            "amount",
            "borrower",
            "liquidator"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint256"
            },
            "borrower": {
              "type": "string"
            },
            "liquidator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "User operations Withdraw spendable collateral token. If the amount is not given, return all spendable collateral",
      "type": "object",
      "required": [
        "withdraw_collateral"
      ],
      "properties": {
        "withdraw_collateral": {
          "type": "object",
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint256"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint256": {
      "type": "string"
    }
  }
}
